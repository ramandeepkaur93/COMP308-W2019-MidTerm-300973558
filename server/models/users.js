var mongoose = require('mongoose');
Schema = mongoose.Schema;
const crypto = require('crypto');
var UserSchema = new Schema({
	firstname: { type : String , required : 'First name is required' },
	lastname: { type : String , required : 'Last name is required' },
	email: { type : String , unique : true, required : 'Email is required', match: [/.+\@.+\..+/, "Please fill a valid e-mail address"] },
	username: { type : String ,required: 'Username is required', trim: true },
	password: { type : String , required : 'Password is required',
		validate: [
			function(password) {
				return password && password.length > 6;
			}, 'Password should be longer'
		]
		},
	salt: { //to hash the password
		type: String
	},
	provider: { // strategy used to register the user
		type: String,
		required: 'Provider is required'
	},
	providerId: String, // user identifier for the authentication strategy
	providerData: {},  // to store the user object retrieved from OAuth providers
	created: {
		type: Date,
		default: Date.now
	},
});


UserSchema.pre('save', function(next) {
	if (this.password) {
		// creates an autogenerated pseudo-random hashing salt
		this.salt = Buffer.from(crypto.randomBytes(16).toString('base64'), 'base64');
		this.password = this.hashPassword(this.password);
	}
	next();
});
// replaces the current user password with a hashed password (more secure)
UserSchema.methods.hashPassword = function(password) {
	return crypto.pbkdf2Sync(password, this.salt, 10000, 64, 'sha512').toString('base64');
};
//authenticates the password
UserSchema.methods.authenticate = function(password) {
	console.log(password);
	return this.password === this.hashPassword(password);
};

UserSchema.statics.findUniqueUsername = function(username, suffix, callback) { 
	// find an available unique username for new users
	var _this = this;
	var possibleUsername = username + (suffix || '');
	_this.findOne({
		username: possibleUsername
	}, function(err, user) {
		if (!err) {
			if (!user) {
				callback(possibleUsername);
			} else {
				return _this.findUniqueUsername(username, (suffix || 0) + 1, callback);
			}
		} else {
			callback(null);
		}
	});
};

UserSchema.set('toJSON', {
	getters: true,
	virtuals: true
});


module.exports = mongoose.model('users', UserSchema);